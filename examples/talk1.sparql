CONSTRUCT { 
  ?x a :Person .
  ?y a :Agent
} WHERE { 
  ?x a :Person .
  ?y a :Agent
}

// Without shapes talk1.shacl

q = CONSTRUCT { ?x a Person٭٭ . ?y a Agent٭٭ } WHERE { ?x a Person٭ . ?y a Agent٭ }

Σ(q) = ?x,?y ∈ X, Person٭٭,Agent٭٭,Person٭,Agent٭ ∈ C, ∅∅

S_in = ∅

Map(q.P) = ∅

Prop(q) = ∅

Prop(q,s) = ∅

DCA(q.P) = 
  ?x ≡ Person,
  ?y ≡ Agent

DCA(q.H) = 
  ?x ⊑ Person٭٭,
  ?y ⊑ Agent٭٭

CWA(q.H) = 
  Person٭٭ ≡ ?x,
  Agent٭٭ ≡ ?y

UNA(q) = ∅

T = 
  T٭ ⊑ T,
  ⊤ ≡ ((T)⊔(T٭))⊔(T٭٭),
  T٭٭ ≡ (?x)⊔(?y),
  T٭ ≡ (?x)⊔(?y)

S_can = 
  Person٭٭ ⊑ Agent٭٭,
  Agent٭٭ ⊑ Person٭٭

S_out = ∅

// Including shapes talk1.shacl

q = CONSTRUCT { ?x a Person٭٭ . ?y a Agent٭٭ } WHERE { ?x a Person٭ . ?y a Agent٭ }

Σ(q) = ?x,?y ∈ X, Person٭٭,Agent٭٭,Person٭,Agent٭ ∈ C, ∅∅

S_in = Person ⊑ Agent

Map(q.P) = ?x ⊑ ?y

Prop(q) = ∅

Prop(q,s) = ∅

DCA(q.P) = 
  ?x ≡ Person,
  ?y ≡ Agent

DCA(q.H) = 
  ?x ⊑ Person٭٭,
  ?y ⊑ Agent٭٭

CWA(q.H) = 
  Person٭٭ ≡ ?x,
  Agent٭٭ ≡ ?y

UNA(q) = ∅

T = 
  T٭ ⊑ T,
  ⊤ ≡ ((T)⊔(T٭))⊔(T٭٭),
  T٭٭ ≡ (?x)⊔(?y),
  T٭ ≡ (?x)⊔(?y)

S_can = 
  Person٭٭ ⊑ Agent٭٭,
  Agent٭٭ ⊑ Person٭٭

S_out = Person٭٭ ⊑ Agent٭٭

// Use this for highlighting that variables x and y are subsumed,
// because of the input shapes, and explain the basic principles of the approach.